{"version":3,"sources":["serviceWorker.js","services/MembersService.js","components/Dashboard.js","index.js"],"names":["Boolean","window","location","hostname","match","MembersService","axios","get","headers","then","res","otp","data","Authorization","resList","Dashboard","state","loading","selectedPaymentState","selectedDiscourseState","paymentState","label","value","discourseState","onPaymentStatusChange","bind","onDiscourseStatusChange","service","export","this","getMembers","setState","members","dt","exportCSV","event","filter","rowData","column","className","paymentStateFilter","style","width","placeholder","options","onChange","showClear","discourseStateFilter","header","textAlign","type","icon","iconPos","onClick","headerGroup","rowSpan","field","sortable","colSpan","filterPlaceholder","filterElement","paginator","responsive","paginatorTemplate","currentPageReportTemplate","rows","rowsPerPageOptions","headerColumnGroup","ref","el","emptyMessage","body","paymentStatusTemplate","discourseStatusTemplate","Component","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.563e1a52.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios';\n\nexport class MembersService {\n\n    getMembers(){\n\n        return axios.get('https://api.teamvegan.at/auth/otp',\n            { \n                headers: {\n                    'x-api-key': 'Tcdz88F8vKsezgpmS0W0PbziYotHxr'\n                }\n            }).then(res => {\n                const otp = res.data;\n\n                return axios.get('https://api.teamvegan.at/dashboard/members',\n                { \n                    headers: {\n                        Authorization: `Bearer ${otp}`\n                    }\n                }).then(resList => resList.data);\n\n            });\n\n        \n\n        // return axios.get('resources/data/members.json')\n        //         .then(res => res.data.data);\n    }\n\n    getCarsSmall() {\n        return axios.get('resources/data/cars.json')\n                .then(res => res.data.data);\n    }\n\n    getCarsMedium() {\n        return axios.get('resources/data/cars.json')\n                .then(res => res.data.data);\n    }\n\n    getCarsLarge() {\n        return axios.get('resources/data/cars.json')\n                .then(res => res.data.data);\n    }\n}","import React, { Component } from 'react';\n\nimport { DataTable } from 'primereact/datatable';\nimport { Button } from 'primereact/button';\nimport { Column } from 'primereact/column';\nimport { ColumnGroup } from 'primereact/columngroup';\nimport { Row } from 'primereact/row';\nimport { Dropdown } from 'primereact/dropdown';\n\nimport { MembersService } from '../services/MembersService';\n\nexport class Dashboard extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            loading: true,\n            selectedPaymentState: null,\n            selectedDiscourseState: null,\n            paymentState: [\n                { label: 'Paid', value: 'true' },\n                { label: 'Not Paid', value: 'false' },\n            ],\n            discourseState: [\n                { label: 'Active', value: 'true' },\n                { label: 'Blocked', value: 'false' },\n                { label: 'Not signed up', value: 'na' },\n            ]\n        };\n        this.onPaymentStatusChange = this.onPaymentStatusChange.bind(this);\n        this.onDiscourseStatusChange = this.onDiscourseStatusChange.bind(this);\n\n        this.service = new MembersService();\n        this.export = this.export.bind(this);\n    }\n\n    componentDidMount() {\n        this.service.getMembers().then(data => this.setState(\n            {\n                members: data,\n                loading: false\n            }\n        ));\n    }\n\n    export() {\n        this.dt.exportCSV();\n    }\n\n    onPaymentStatusChange(event) {\n        this.dt.filter(event.value, 'paid', 'equals');\n        this.setState({selectedPaymentState: event.value});\n    }\n\n    onDiscourseStatusChange(event) {\n        if (event.value === 'na') {\n            this.dt.filter(null, 'discourse', 'equals');\n        } else {\n            this.dt.filter(event.value, 'discourse.active', 'equals');\n        }\n        this.setState({selectedDiscourseState: event.value});\n    }\n\n    paymentStatusTemplate(rowData, column) {\n        if (rowData['paid'] === true) {\n            return <i className=\"pi pi-check\"></i>\n        } else {\n            return <i className=\"pi pi-times\"></i>\n        }\n    }\n\n    discourseStatusTemplate(rowData, column) {\n        if (rowData['discourse']['active'] === true) {\n            return <i className=\"pi pi-check\"></i>\n        } else {\n            return <i className=\"pi pi-times\"></i>\n        }\n    }\n\n    render() {\n        // const paginatorLeft = <Button icon=\"pi pi-refresh\"/>;\n        const paymentStateFilter = <Dropdown style={{width: '100%'}} placeholder=\"filter\" \n            value={this.state.selectedPaymentState} options={this.state.paymentState} onChange={this.onPaymentStatusChange} showClear />;\n        const discourseStateFilter = <Dropdown style={{width: '100%'}} placeholder=\"filter\" \n            value={this.state.selectedDiscourseState} options={this.state.discourseState} onChange={this.onDiscourseStatusChange} showClear />;\n\n        const header = <div style={{textAlign:'left'}}>\n                        <Button type=\"button\" icon=\"pi pi-external-link\" iconPos=\"left\" label=\"CSV\" onClick={this.export}/>\n                    </div>;\n\n\n        const headerGroup = <ColumnGroup>\n                            <Row>\n                                <Column header=\"name\" rowSpan={2} field=\"name\" sortable />\n                                <Column header=\"email\" rowSpan={2} field=\"email\" sortable />\n                                <Column header=\"paid\" rowSpan={2} field=\"paid\" />\n                                <Column header=\"payment\" colSpan={4} />\n                                <Column header=\"forum\" colSpan={2} />\n                            </Row>\n                            <Row>\n                                <Column header=\"method\" field=\"payment.method\" sortable />\n                                <Column header=\"date\" field=\"payment.date\" sortable />\n                                <Column header=\"amount\" field=\"payment.amount\" sortable />\n                                <Column header=\"payer\" field=\"payment.payerName\" sortable />\n\n                                <Column header=\"username\" field=\"discourse.username\" sortable />\n                                <Column header=\"active\" field=\"discourse.active\" sortable />\n                            </Row>\n                            <Row>\n                                <Column field=\"name\" filter filterPlaceholder=\"filter\" />\n                                <Column field=\"email\" filter filterPlaceholder=\"filter\" />\n                                <Column field=\"paid\" filter filterElement={paymentStateFilter} />\n                                <Column />\n                                <Column />\n                                <Column />\n                                <Column />\n                                <Column field=\"discourse.username\" filter filterPlaceholder=\"filter\" />\n                                <Column field=\"discourse\" filter filterElement={discourseStateFilter} />\n                            </Row>\n                        </ColumnGroup>;\n\n        return (\n            <DataTable \n                value={this.state.members}\n                paginator\n                responsive\n                // paginatorLeft={paginatorLeft}\n                paginatorTemplate=\"FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink CurrentPageReport RowsPerPageDropdown\"\n                currentPageReportTemplate=\"Showing {first} to {last} of {totalRecords} entries\"\n                rows={25}\n                rowsPerPageOptions={[10,25,50,100,500]}\n                header={header}\n                headerColumnGroup={headerGroup}\n                ref={(el) => { this.dt = el; }}\n                emptyMessage=\"No records found\"\n                loading={this.state.loading}>\n\n                <Column field=\"name\" />\n                <Column field=\"email\" className=\"ellipsis\" />\n                <Column field=\"paid\" body={this.paymentStatusTemplate} />\n\n                <Column field=\"payment.method\" />\n                <Column field=\"payment.paidAt\" />\n                <Column field=\"payment.amount\" />\n                <Column field=\"payment.payerName\" />\n\n                <Column field=\"discourse.username\" className=\"ellipsis\" />\n                <Column field=\"discourse.active\" body={this.discourseStatusTemplate} />\n            </DataTable>\n        );\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport 'primereact/resources/themes/rhea/theme.css';\nimport 'primereact/resources/primereact.min.css';\nimport 'primeicons/primeicons.css';\n\nimport * as serviceWorker from './serviceWorker';\nimport { Dashboard } from './components/Dashboard';\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* <App /> */}\n    <Dashboard />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}